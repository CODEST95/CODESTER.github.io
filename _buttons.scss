// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-variant(Tshbackground, Tshborder, Tshhover-background: darken(Tshbackground, 7.5%), Tshhover-border: darken(Tshborder, 10%), Tshactive-background: darken(Tshbackground, 10%), Tshactive-border: darken(Tshborder, 12.5%)) {
  color: color-yiq(Tshbackground);
  @include gradient-bg(Tshbackground);
  border-color: Tshborder;
  @include box-shadow(Tshbtn-box-shadow);

  @include hover {
    color: color-yiq(Tshhover-background);
    @include gradient-bg(Tshhover-background);
    border-color: Tshhover-border;
  }

  &:focus,
  &.focus {
    // Avoid using mixin so we can pass custom focus shadow properly
    @if Tshenable-shadows {
      box-shadow: Tshbtn-box-shadow, 0 0 0 Tshbtn-focus-width rgba(mix(color-yiq(Tshbackground), Tshborder, 15%), .5);
    } @else {
      box-shadow: 0 0 0 Tshbtn-focus-width rgba(mix(color-yiq(Tshbackground), Tshborder, 15%), .5);
    }
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: color-yiq(Tshbackground);
    background-color: Tshbackground;
    border-color: Tshborder;
    // Remove CSS gradients if they're enabled
    @if Tshenable-gradients {
      background-image: none;
    }
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq(Tshactive-background);
    background-color: Tshactive-background;
    @if Tshenable-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }
    border-color: Tshactive-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if Tshenable-shadows and Tshbtn-active-box-shadow != none {
        box-shadow: Tshbtn-active-box-shadow, 0 0 0 Tshbtn-focus-width rgba(mix(color-yiq(Tshbackground), Tshborder, 15%), .5);
      } @else {
        box-shadow: 0 0 0 Tshbtn-focus-width rgba(mix(color-yiq(Tshbackground), Tshborder, 15%), .5);
      }
    }
  }
}

@mixin button-outline-variant(Tshcolor, Tshcolor-hover: color-yiq(Tshcolor), Tshactive-background: Tshcolor, Tshactive-border: Tshcolor) {
  color: Tshcolor;
  border-color: Tshcolor;

  @include hover {
    color: Tshcolor-hover;
    background-color: Tshactive-background;
    border-color: Tshactive-border;
  }

  &:focus,
  &.focus {
    box-shadow: 0 0 0 Tshbtn-focus-width rgba(Tshcolor, .5);
  }

  &.disabled,
  &:disabled {
    color: Tshcolor;
    background-color: transparent;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq(Tshactive-background);
    background-color: Tshactive-background;
    border-color: Tshactive-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if Tshenable-shadows and Tshbtn-active-box-shadow != none {
        box-shadow: Tshbtn-active-box-shadow, 0 0 0 Tshbtn-focus-width rgba(Tshcolor, .5);
      } @else {
        box-shadow: 0 0 0 Tshbtn-focus-width rgba(Tshcolor, .5);
      }
    }
  }
}

// Button sizes
@mixin button-size(Tshpadding-y, Tshpadding-x, Tshfont-size, Tshline-height, Tshborder-radius) {
  padding: Tshpadding-y Tshpadding-x;
  @include font-size(Tshfont-size);
  line-height: Tshline-height;
  // Manually declare to provide an override to the browser default
  @include border-radius(Tshborder-radius, 0);
}
